on: [push, workflow_dispatch]
name: CI

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        build_type: [release, debug]
        name:
        - btor
        - bitwuzla
        - cvc5
        - msat
        - yices2
        - z3
        include:
          - build_type: debug
            config_opts: --debug
          - name: msat
            setup_opts: --auto-yes
    name: ${{ matrix.os }}:${{ matrix.name }}-${{ matrix.build_type }}
    runs-on: ${{ matrix.os}}

    steps:
      - uses: actions/checkout@v4

      - name: Remove GHC to free up disk space (Linux)
        if: runner.os == 'Linux'
        run: ghcup nuke

      - name: Install Packages (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            gperf \
            meson \
            python3-packaging

      - name: Install Packages (macOS)
        if: runner.os == 'macOS'
        run: |
          brew update
          brew install \
            autoconf \
            bison \
            gperf \
            meson \
            python-packaging

      - name: Fix Homebrew paths (macOS)
        if: runner.os == 'macOS'
        run: |
          echo "LDFLAGS=-L$(brew --prefix)/lib $LDFLAGS" >> "$GITHUB_ENV"
          echo "CFLAGS=-I$(brew --prefix)/include $CFLAGS" >> "$GITHUB_ENV"
          echo "CPPFLAGS=-I$(brew --prefix)/include $CPPFLAGS" >> "$GITHUB_ENV"
          echo "PATH=$(brew --prefix)/opt/bison/bin:$PATH" >> "$GITHUB_ENV"

      - name: Set up Python virtual environment
        run: |
          python3 -m venv .venv --system-site-packages
          echo "PATH=$GITHUB_WORKSPACE/.venv/bin:$PATH" >> $GITHUB_ENV

      - name: Set up Underlying Solver
        run: ./ci-scripts/setup-${{ matrix.name }}.sh ${{ matrix.setup_opts }}

      - name: Configure
        env:
          CMAKE_GENERATOR: Ninja
        run: ./configure.sh --${{ matrix.name }} --python --smtlib-reader --static ${{ matrix.config_opts }}

      - name: Build
        run: ninja -C build

      - name: Install Python bindings
        run: pip install $(ls build/python/*.whl)[pysmt,test]

      - name: Test C++
        id: test-cpp
        continue-on-error: true
        run: ctest --test-dir build

      - name: Upload failing test log
        if: steps.test-cpp.outcome == 'failure'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}-${{ matrix.name }}${{ matrix.name_suffix }}-test-log-${{ github.run_id }}
          path: build/Testing/Temporary/LastTest.log

      - name: Fail pipeline due to C++ test failure
        if: steps.test-cpp.outcome == 'failure'
        run: |
          echo "C++ tests failed. Inspect the artifact for details."
          exit 1

      - name: Test Python Bindings
        run: pytest tests/python
