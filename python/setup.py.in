#!/usr/bin/env python3

from Cython.Build import cythonize
import os
import sys
import sysconfig
from pathlib import Path
import platform
from setuptools import setup
from setuptools.extension import Extension

# These paths will be configured by CMake
PROJECT_SOURCE_DIR = "@PROJECT_SOURCE_DIR@"
PROJECT_BINARY_DIR = "@PROJECT_BINARY_DIR@"

# Get the platform-specific library extension
if sys.platform == "darwin":
    lib_ext = ".dylib"
elif sys.platform == "win32":
    lib_ext = ".dll"
else:  # linux
    lib_ext = ".so"

def find_solvers():
    """Find all compiled solvers based on built libraries in the build directory."""
    all_solvers = set()
    build_dir = Path(PROJECT_BINARY_DIR)

    # First verify the base library exists
    base_lib_name = f"libsmt-switch{lib_ext}"
    base_lib_path = build_dir / base_lib_name
    if not base_lib_path.exists():
        raise FileNotFoundError(f"Could not find base library: {base_lib_name} in {build_dir}")

    # Use recursive glob to find all solver libraries
    pattern = f"**/libsmt-switch-*{lib_ext}"
    for lib_path in build_dir.glob(pattern):
        # Extract solver name from library filename
        lib_name = lib_path.name
        solver = lib_name.replace(f"libsmt-switch-", "").replace(lib_ext, "")
        all_solvers.add(solver)

    return sorted(list(all_solvers))

# Get Python extension suffix
ext_filename = 'smt_switch' + sysconfig.get_config_var('EXT_SUFFIX')

# Set up package structure
built_solvers = find_solvers()
packages = ['smt_switch'] + [f'smt_switch.{solver}' for solver in built_solvers]

# Handle Cython compilation if the extension hasn't been built yet
if not os.path.isfile(os.path.join('smt_switch', ext_filename)):
    # Add flags and directories for found solvers.
    libraries = ["smt-switch"]
    library_dirs = [PROJECT_BINARY_DIR, f"{PROJECT_BINARY_DIR}/python"]
    include_dirs = [f"{PROJECT_SOURCE_DIR}/include", PROJECT_BINARY_DIR, f"{PROJECT_BINARY_DIR}/python"]
    for solver in built_solvers:
        libraries.append(f"smt-switch-{solver}")
        library_dirs.append(f"{PROJECT_BINARY_DIR}/{solver}")
        include_dirs.append(f"{PROJECT_SOURCE_DIR}/{solver}/include")
    extra_compile_args = ["-std=c++17"]
    extra_link_args = []
    for path in library_dirs:
        extra_link_args.append(f"-Wl,-rpath,{path}")

    # Handle OS-specific settings.
    if sys.platform == 'darwin':
        mac_ver = os.environ.get("MACOSX_DEPLOYMENT_TARGET")
        if mac_ver is None:
            version_str, _, _ = platform.mac_ver()
            major_minor = version_str.split(".")[:2]
            mac_ver = ".".join(major_minor)
            os.environ.setdefault("MACOSX_DEPLOYMENT_TARGET", mac_ver)
        arch = "@MACOS_ARCH@"  # Set by CMake
        if not arch:
            arch = platform.machine()
        host_platform = "macosx-" + mac_ver + "-" + arch
        os.environ.setdefault("_PYTHON_HOST_PLATFORM", host_platform)
        arch_flags = "-arch " + arch
        os.environ.setdefault("ARCHFLAGS", arch_flags)
    if sys.platform == "win32":
        extra_compile_args += ["-DMS_WIN64"]
        os.environ['PATH'] += r';C:\msys64\mingw64\bin'

    # Set up the extension module
    ext_module = Extension(
        name="smt_switch.smt_switch_base",
        sources=["smt_switch_base.pyx"],
        libraries=libraries,
        library_dirs=library_dirs,
        runtime_library_dirs=library_dirs,
        include_dirs=include_dirs,
        language="c++",
        extra_compile_args=extra_compile_args,
        extra_link_args=extra_link_args,
    )
    ext_module.cython_directives = {"embedsignature": True}

    # Cython compilation settings
    compiler_directives = {
        'language_level': 3,
        'binding': False,
    }
    setup(
        ext_modules=cythonize([ext_module], compiler_directives=compiler_directives),
        packages=packages,
        package_data={'': [f'*{lib_ext}']},
    )
else:
    setup(
        packages=packages,
        package_data={'': [f'*{lib_ext}']},
        has_ext_modules=lambda: True,
    )
